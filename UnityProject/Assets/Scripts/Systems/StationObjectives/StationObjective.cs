using System;
using System.Collections;
using System.Collections.Generic;
using Items;
using UnityEngine;

namespace StationObjectives
{
	/// <summary>
	/// The base class ScriptableObject for all antagonist objectives
	/// </summary>
	public abstract class StationObjective : ScriptableObject
	{

		/// <summary>
		/// The name of the objective type
		/// </summary>
		[SerializeField]
		protected string objectiveName;
		/// <summary>
		/// The name of the objective type
		/// </summary>
		public string ObjectiveName => objectiveName;

		/// <summary>
		/// The description of the objective which is shown to players. Usually generated by the objective when it is setup.
		/// </summary>
		[SerializeField]
		protected string description;

		[SerializeField]
		protected string victoryDescription;

		/// <summary>
		/// The description read out at the end of the round. Slightly different from the normal description.
		/// </summary>
		public string VictoryDescription => victoryDescription;

		/// <summary>
		/// The description of the objective which is shown to players. Usually generated by the objective when it is setup.
		/// </summary>
		public string Description => description;

		/// <summary>
		/// Variable to override the IsComplete function. Useful for free/custom objectives.
		/// </summary>
		protected bool Complete = false;

		/// <summary>
		/// Performs setup if needed
		/// </summary>
		public void DoSetup()
		{
			Setup();
		}

		/// <summary>
		/// Perform initial setup of the objective if needed
		/// </summary>
		protected abstract void Setup();

		/// <summary>
		/// Shows if this objective is complete or not
		/// </summary>
		public bool IsComplete()
		{
			return CheckCompletion();
		}

		/// <summary>
		/// Manually set objective as complete
		/// </summary>
		public void SetAsComplete()
		{
			Complete = true;
		}

		/// <summary>
		/// Defines how to check the completion of the objective.
		/// </summary>
		protected abstract bool CheckCompletion();
	}
}
